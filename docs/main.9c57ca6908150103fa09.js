!function(e){function t(t){for(var r,i,u=t[0],l=t[1],c=t[2],f=0,d=[];f<u.length;f++)i=u[f],Object.prototype.hasOwnProperty.call(o,i)&&o[i]&&d.push(o[i][0]),o[i]=0;for(r in l)Object.prototype.hasOwnProperty.call(l,r)&&(e[r]=l[r]);for(s&&s(t);d.length;)d.shift()();return a.push.apply(a,c||[]),n()}function n(){for(var e,t=0;t<a.length;t++){for(var n=a[t],r=!0,u=1;u<n.length;u++){var l=n[u];0!==o[l]&&(r=!1)}r&&(a.splice(t--,1),e=i(i.s=n[0]))}return e}var r={},o={0:0},a=[];function i(t){if(r[t])return r[t].exports;var n=r[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=e,i.c=r,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)i.d(n,r,function(t){return e[t]}.bind(null,r));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="";var u=window.webpackJsonp=window.webpackJsonp||[],l=u.push.bind(u);u.push=t,u=u.slice();for(var c=0;c<u.length;c++)t(u[c]);var s=l;a.push(["tjUo",1]),n()}({tjUo:function(e,t,n){"use strict";n.r(t);var r=n("q1tI"),o=n.n(r),a=n("i8i4");function i(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,u=e[Symbol.iterator]();!(r=(i=u.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==u.return||u.return()}finally{if(o)throw a}}return n}(e,t)||l(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function u(e){return function(e){if(Array.isArray(e))return c(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||l(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function l(e,t){if(e){if("string"==typeof e)return c(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?c(e,t):void 0}}function c(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var s,f,d=function(e){return Number(e)||0},y=function(e){return 0===e.length},m=function(e){return function(t){return t.slice(0,e)}},p=function(e){return e.slice(0).reverse()},v=function(e){return function(t){return function(n){return e(t(n))}}},h=function(e){return!e},b=function e(t){var n,r=["","one","two","three","four","five","six","seven","eight","nine","ten","eleven","twelve","thirteen","fourteen","fifteen","sixteen","seventeen","eighteen","nineteen"],o=["","","twenty","thirty","forty","fifty","sixty","seventy","eighty","ninety"],a=["","thousand","million","billion","trillion","quadrillion","quintillion","sextillion","septillion","octillion","nonillion"];return"number"==typeof t?e(String(t)):"0"===t?"zero":v(function e(t){return function(n){return y(n)?[]:[m(t)(n)].concat(u(e(t)(function(e){return function(t){return t.slice(e)}}(t)(n))))}}(3))(p)((n=t,Array.from(n))).map((function(e){var t=i(e,3),n=t[0],a=t[1],u=t[2];return[0===d(u)?"":r[u]+" hundred ",0===d(n)?o[a]:o[a]&&o[a]+"-"||"",r[a+n]||r[n]].join("")})).map((function(e,t){return""===e?e:"".concat(e," ").concat(a[t])})).filter(v(h)(y)).reverse().join(" ").trim()},w=function(){return Math.floor(999*Math.random())+1},g=w(),S=b(g),j=function(){return{words:S,numerals:g}},E=function(e){var t=e.words,n=e.showRow;return o.a.createElement("div",{id:"question-row",className:"row",style:{display:n}},"Your number is ",t)},O=function(e){var t=e.answer,n=e.answerIsCorrect,r=e.handleChange,a=e.showRow;return o.a.useLayoutEffect((function(){document.querySelector("#answer-row input").focus()})),o.a.createElement("div",{id:"answer-row",className:"row",style:{display:a}},"In numerals this says:",o.a.createElement("input",{type:"number",max:"9999",min:"0",step:"1",value:t,onChange:r}),o.a.createElement("div",{className:"mark-holder"},o.a.createElement("span",{className:"cross",style:{display:null==n||n?"none":""}},"âœ˜")))},A="https://api.thecatapi.com/api/images/get?format=src&type=gif",I=function(){f=new Promise((function(e,t){A+="&cacheBuster="+(new Date).getTime();var n=document.createElement("img");n.onload=function(){console.log(A,"preloaded!"),s=n,e()},n.onerror=function(e){t(e)},n.src=A}))},x=function(e){var t=e.question;return o.a.useLayoutEffect((function(){var e;e=document.getElementById("cat-gif"),f||I(),f.then((function(){e.innerHTML="",e.appendChild(s)})).then((function(){f=null,I()}))}),[t]),o.a.createElement("div",{id:"cat-gif",className:"done-row"},"Loading...")},P=function(e){var t=e.question,n=e.shouldDisplay,r=e.resetPage;return o.a.createElement("div",{id:"done",className:"row",style:{display:n}},o.a.createElement("div",{className:"result done-row"},"Yes! ",t.words," says ",t.numerals),o.a.createElement("div",{className:"done-row"},o.a.createElement("button",{onClick:r},"Awesome, Again?")),o.a.createElement(x,{question:t}))};function q(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,u=e[Symbol.iterator]();!(r=(i=u.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==u.return||u.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return C(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return C(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function C(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var M=function(){var e=q(o.a.useState(""),2),t=e[0],n=e[1],r=q(o.a.useState(null),2),a=r[0],i=r[1],u=q(o.a.useState(j()),2),l=u[0],c=u[1],s=function(){return null!=a&&a?"none":""};return o.a.createElement("div",null,o.a.createElement(E,{words:l.words,showRow:s()}),o.a.createElement(O,{answer:t,answerIsCorrect:a,showRow:s(),handleChange:function(e){var t=e.target.value;n(t);var r=parseInt(t,10);i(r===g)}}),o.a.createElement(P,{question:l,shouldDisplay:null!=a&&a?"":"none",resetPage:function(){var e=(g=w(),S=b(g),j());c(e),n(""),i(null)}}))};Object(a.hydrate)(o.a.createElement(M,null),document.getElementById("root"))}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,