!function(e){function t(t){for(var r,a,u=t[0],l=t[1],c=t[2],s=0,y=[];s<u.length;s++)a=u[s],Object.prototype.hasOwnProperty.call(o,a)&&o[a]&&y.push(o[a][0]),o[a]=0;for(r in l)Object.prototype.hasOwnProperty.call(l,r)&&(e[r]=l[r]);for(f&&f(t);y.length;)y.shift()();return i.push.apply(i,c||[]),n()}function n(){for(var e,t=0;t<i.length;t++){for(var n=i[t],r=!0,u=1;u<n.length;u++){var l=n[u];0!==o[l]&&(r=!1)}r&&(i.splice(t--,1),e=a(a.s=n[0]))}return e}var r={},o={0:0},i=[];function a(t){if(r[t])return r[t].exports;var n=r[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,a),n.l=!0,n.exports}a.m=e,a.c=r,a.d=function(e,t,n){a.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},a.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.t=function(e,t){if(1&t&&(e=a(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(a.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)a.d(n,r,function(t){return e[t]}.bind(null,r));return n},a.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return a.d(t,"a",t),t},a.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},a.p="";var u=window.webpackJsonp=window.webpackJsonp||[],l=u.push.bind(u);u.push=t,u=u.slice();for(var c=0;c<u.length;c++)t(u[c]);var f=l;i.push(["tjUo",1]),n()}({tjUo:function(e,t,n){"use strict";n.r(t);var r=n("q1tI"),o=n.n(r),i=n("i8i4");function a(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==u.return||u.return()}finally{if(o)throw i}}return n}(e,t)||l(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function u(e){return function(e){if(Array.isArray(e))return c(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||l(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function l(e,t){if(e){if("string"==typeof e)return c(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?c(e,t):void 0}}function c(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var f,s,y=function(e){return Number(e)||0},m=function(e){return 0===e.length},d=function(e){return function(t){return t.slice(0,e)}},p=function(e){return e.slice(0).reverse()},v=function(e){return function(t){return function(n){return e(t(n))}}},h=function(e){return!e},b=function e(t){var n,r=["","one","two","three","four","five","six","seven","eight","nine","ten","eleven","twelve","thirteen","fourteen","fifteen","sixteen","seventeen","eighteen","nineteen"],o=["","","twenty","thirty","forty","fifty","sixty","seventy","eighty","ninety"],i=["","thousand","million","billion","trillion","quadrillion","quintillion","sextillion","septillion","octillion","nonillion"];return"number"==typeof t?e(String(t)):"0"===t?"zero":v(function e(t){return function(n){return m(n)?[]:[d(t)(n)].concat(u(e(t)(function(e){return function(t){return t.slice(e)}}(t)(n))))}}(3))(p)((n=t,Array.from(n))).map((function(e){var t=a(e,3),n=t[0],i=t[1],u=t[2];return[0===y(u)?"":r[u]+" hundred ",0===y(n)?o[i]:o[i]&&o[i]+"-"||"",r[i+n]||r[n]].join("")})).map((function(e,t){return""===e?e:"".concat(e," ").concat(i[t])})).filter(v(h)(m)).reverse().join(" ").trim()},g=function(){return Math.floor(999*Math.random())+1},w=g(),j=b(w),S=function(){return{words:j,numerals:w}},E="https://api.thecatapi.com/api/images/get?format=src&type=gif",O=function(){s=new Promise((function(e,t){E+="&cacheBuster="+(new Date).getTime();var n=document.createElement("img");n.onload=function(){console.log(E,"preloaded!"),f=n,e()},n.onerror=function(e){t(e)},n.src=E}))};function A(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==u.return||u.return()}finally{if(o)throw i}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return I(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return I(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function I(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var x=function(){var e=A(o.a.useState(""),2),t=e[0],n=e[1],r=A(o.a.useState(null),2),i=r[0],a=r[1],u=A(o.a.useState(S()),2),l=u[0],c=u[1];o.a.useLayoutEffect((function(){var e;e=document.getElementById("cat-gif"),s||O(),s.then((function(){e.innerHTML="",e.appendChild(f)})).then((function(){s=null,O()}))}),[l]);var y=function(){return null!=i&&i?"":"none"},m=function(){return null!=i&&i?"none":""};return o.a.createElement("div",null,o.a.createElement("div",{id:"question-row",className:"row",style:{display:m()}},"Your number is ",S().words),o.a.createElement("div",{id:"answer-row",className:"row",style:{display:m()}},"In numerals this says:",o.a.createElement("input",{type:"number",max:"9999",min:"0",step:"1",value:t,onChange:function(e){var t=e.target.value;n(t);var r=parseInt(t,10),o=r===w;a(o)}}),o.a.createElement("div",{className:"mark-holder"},o.a.createElement("span",{className:"tick",style:{display:y()}},"✓"),o.a.createElement("span",{className:"cross",style:{display:null==i||i?"none":""}},"✘"))),o.a.createElement("div",{id:"done",className:"row",style:{display:y()}},o.a.createElement("div",{className:"result done-row"},"Yes! ",S().words," says ",S().numerals),o.a.createElement("div",{className:"done-row"},o.a.createElement("button",{onClick:function(){var e=(w=g(),j=b(w),S());c(e),n(""),a(null)}},"Awesome, Again?")),o.a.createElement("div",{id:"cat-gif",className:"done-row"})))};Object(i.hydrate)(o.a.createElement(x,null),document.getElementById("root"))}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,